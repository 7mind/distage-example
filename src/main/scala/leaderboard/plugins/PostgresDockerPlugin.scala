package leaderboard.plugins

import distage.Scene
import izumi.distage.docker.Docker.DockerPort
import izumi.distage.docker.bundled.PostgresDocker
import izumi.distage.docker.modules.DockerSupportModule
import izumi.distage.plugins.PluginDef
import izumi.functional.bio.{Async2, IO2}
import leaderboard.config.PostgresPortCfg
import zio.Task

object PostgresDockerPlugin extends PluginDef {
  // only enable postgres docker when Scene axis is set to Managed
  tag(Scene.Managed)

  // add docker support dependencies
  include(DockerSupportModule[Task])

  // WTF why isn't DefaultModule working???
  // FIXME: because still a broken lambda is generated by izumi-reflect in BIO2InstancesModule:
  //  {type.IO3[=λ %_$19,%_$20 → ZIO[-Any,+_$19,+_$20]]} - note 2 arguments instead of 3
  //  instead should be {type.izumi.functional.bio.IO3[=λ %R,%E,%A → zio.ZIO[-scala.Any,+E,+A]]}
  make[IO2[zio.IO]].using[Async2[zio.IO]]
  addImplicit[Async2[zio.IO]]
  // WTF

  // launch postgres docker for tests
  make[PostgresDocker.Container]
    .fromResource(PostgresDocker.make[Task])

  // spawned docker container port is randomized
  // to prevent conflicts, so make PostgresPortCfg
  // point to the new port. This will also
  // cause the container to start before
  // integration check is performed
  make[PostgresPortCfg].from {
    (docker: PostgresDocker.Container) =>
      val knownAddress = docker.availablePorts.first(DockerPort.TCP(5432))
      PostgresPortCfg(knownAddress.hostString, knownAddress.port)
  }
}
